pub mod board {
    pub const RANKS: usize = 8;
    pub const FILES: usize = 8;
    pub const TOP_BORDER: &'static str = r".-.================================================================================================.-.";
    pub const BOTTOM_BORDER: &'static str = r"'-'=========[a]=========[b]=========[c]=========[d]=========[e]=========[f]=========[g]=========[h]'-'";
    pub const LAYERS_PER_RANK: usize = 5;
    pub mod index {
        pub const EMPTY: usize = 0;
        pub mod black {
            pub const PAWN: usize = 1;
            pub const KNIGHT: usize = 2;
            pub const BISHOP: usize = 3;
            pub const ROOK: usize = 4;
            pub const QUEEN: usize = 5;
            pub const KING: usize = 6;
        }
        pub mod white {
            pub const PAWN: usize = 7;
            pub const KNIGHT: usize = 8;
            pub const BISHOP: usize = 9;
            pub const ROOK: usize = 10;
            pub const QUEEN: usize = 11;
            pub const KING: usize = 12;
        }
    }
    #[rustfmt::skip]
    pub const PIECE: [[[&'static str; 13]; 5]; 2] = [
    [
        [r"::::::::::::",r"::::::::::::",r"::::::::::::",r"::::::::::::",r"::::::::::::",r"::: _ww_ :::",r"::::\++/::::",r"::::::::::::",r"::::::::::::",r"::::::::::::",r"::::::::::::",r"::: _ww_ :::",r"::::\++/::::"],
        [r"::::::::::::",r"::::::::::::",r"::: __,,::::",r":::::<>:::::",r"::::UUUU::::",r"::: \  / :::",r"::::(  )::::",r"::::::::::::",r"::: __,, :::",r":::::<>:::::",r"::::UUUU::::",r"::: \@@/ :::",r"::::(@@)::::"],
        [r"::::::::::::",r":::::():::::",r":: L   \~ ::",r":::::/\:::::",r"::::|  |::::",r"::: |  | :::",r"::::|  |::::",r":::::():::::",r":: L@@@\~ ::",r":::::/\:::::",r"::: |@@| :::",r"::: |@@| :::",r"::::|@@|::::"],
        [r"::::::::::::",r":::::{}:::::",r":::: ) ( :::",r"::::\  /::::",r"::::|  |::::",r"::: /  \ :::",r"::::/  \::::",r":::: @@ ::::",r":::: )@( :::",r"::: \@@/ :::",r"::: |@@| :::",r"::: /@@\ :::",r"::::/@@\::::"],
        [r"::::::::::::",r"::::{__}::::",r":: {____} ::",r":::{____}:::",r":::{____}:::",r":: {____} ::",r":::{____}:::",r"::: {@@} :::",r":: {@@@@} ::",r":: {@@@@} ::",r":: {@@@@} ::",r":: {@@@@} ::",r":::{@@@@}:::"],
        ],
    [
        [r"            ",r"            ",r"            ",r"            ",r"            ",r"    _ww_    ",r"    \++/    ",r"            ",r"            ",r"            ",r"            ",r"    _ww_    ",r"    \++/    "],
        [r"            ",r"            ",r"    __,,    ",r"     <>     ",r"    UUUU    ",r"    \  /    ",r"    (  )    ",r"            ",r"    __,,    ",r"     <>     ",r"    UUUU    ",r"    \@@/    ",r"    (@@)    "],
        [r"            ",r"     ()     ",r"   L   \~   ",r"     /\     ",r"    |  |    ",r"    |  |    ",r"    |  |    ",r"     ()     ",r"   L@@@\~   ",r"     /\     ",r"    |@@|    ",r"    |@@|    ",r"    |@@|    "],
        [r"            ",r"     {}     ",r"     ) (    ",r"    \  /    ",r"    |  |    ",r"    /  \    ",r"    /  \    ",r"     @@     ",r"     )@(    ",r"    \@@/    ",r"    |@@|    ",r"    /@@\    ",r"    /@@\    "],
        [r"            ",r"    {__}    ",r"   {____}   ",r"   {____}   ",r"   {____}   ",r"   {____}   ",r"   {____}   ",r"    {@@}    ",r"   {@@@@}   ",r"   {@@@@}   ",r"   {@@@@}   ",r"   {@@@@}   ",r"   {@@@@}   "],
    ],
];
}

/**
 * Each board is stored as bitmaps of the pieces, since a board is 8x8 we use a u64
 * The bit position corresponds to a place on the board:
 *    ------------------------
 * 8 | 64 63 62 61 60 59 58 57 |
 * 7 | 56 55 54 53 52 51 50 49 |
 * 6 | 48 47 46 45 44 43 42 41 |
 * 5 | 40 39 38 37 36 35 34 33 |
 * 4 | 32 31 30 29 28 27 26 25 |
 * 3 | 24 23 22 21 20 19 18 17 |
 * 2 | 16 15 14 13 12 11 10 09 |
 * 1 | 08 07 06 05 04 03 02 01 |
 *    ------------------------
 *      a  b  c  d  e  f  g  h
 */
struct Pieces {
    pawns: u64,
    knights: u64,
    bishop: u64,
    rooks: u64,
    queens: u64,
    kings: u64,
}

impl Pieces {
    fn new(white: bool) -> Self {
        match white {
            #[rustfmt::skip]
            true => Self {
                pawns:   0b_00000000_00000000_00000000_00000000_00000000_00000000_11111111_00000000,
                knights: 0b_00000000_00000000_00000000_00000000_00000000_00000000_00000000_01000010,
                bishop:  0b_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00100100,
                rooks:   0b_00000000_00000000_00000000_00000000_00000000_00000000_00000000_10000001,
                queens:  0b_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00010000,
                kings:   0b_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00001000,
            },
            #[rustfmt::skip]
            false => Self {
                pawns:   0b_00000000_11111111_00000000_00000000_00000000_00000000_00000000_00000000,
                knights: 0b_01000010_00000000_00000000_00000000_00000000_00000000_00000000_00000000,
                bishop:  0b_00100100_00000000_00000000_00000000_00000000_00000000_00000000_00000000,
                rooks:   0b_10000001_00000000_00000000_00000000_00000000_00000000_00000000_00000000,
                queens:  0b_00010000_00000000_00000000_00000000_00000000_00000000_00000000_00000000,
                kings:   0b_00001000_00000000_00000000_00000000_00000000_00000000_00000000_00000000,
            },
        }
    }
}

pub struct Chess {
    white: Pieces,
    black: Pieces,
}

impl Chess {
    pub fn new() -> Self {
        Self {
            white: Pieces::new(true),
            black: Pieces::new(false),
        }
    }

    pub fn print_board(self: &Self) {
        let squares = self.get_square_array();

        println!("{}", board::TOP_BORDER);
        for rank in 0..board::RANKS {
            for layer in 0..board::LAYERS_PER_RANK {
                if layer == 0 {
                    print!("[{}]", 8 - rank);
                } else {
                    print!("| |");
                }
                for file in 0..board::FILES {
                    print!(
                        "{}",
                        board::PIECE[(rank + file) % 2][layer]
                            [squares[63 - (rank * board::FILES + file)]]
                    );
                }
                println!("| |");
            }
        }
        println!("{}", board::BOTTOM_BORDER);
    }

    /**
     * Returns an array of indexes, used in printing out the board
     */
    fn get_square_array(self: &Self) -> [usize; 64] {
        let mut board = [0usize; 64];
        let mut place: u64 =
            0b_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001;

        // goes through each of the bits and determines what piece is there
        for i in 0..u64::BITS {
            if self.white.pawns & place > 0 {
                board[i as usize] = board::index::white::PAWN;
            } else if self.white.knights & place > 0 {
                board[i as usize] = board::index::white::KNIGHT;
            } else if self.white.bishop & place > 0 {
                board[i as usize] = board::index::white::BISHOP;
            } else if self.white.rooks & place > 0 {
                board[i as usize] = board::index::white::ROOK;
            } else if self.white.queens & place > 0 {
                board[i as usize] = board::index::white::QUEEN;
            } else if self.white.kings & place > 0 {
                board[i as usize] = board::index::white::KING;
            } else if self.black.pawns & place > 0 {
                board[i as usize] = board::index::black::PAWN;
            } else if self.black.knights & place > 0 {
                board[i as usize] = board::index::black::KNIGHT;
            } else if self.black.bishop & place > 0 {
                board[i as usize] = board::index::black::BISHOP;
            } else if self.black.rooks & place > 0 {
                board[i as usize] = board::index::black::ROOK;
            } else if self.black.queens & place > 0 {
                board[i as usize] = board::index::black::QUEEN;
            } else if self.black.kings & place > 0 {
                board[i as usize] = board::index::black::KING;
            } else {
                board[i as usize] = board::index::EMPTY;
            }
            place <<= 1;
        }

        board
    }
}

pub fn sample_board() -> &'static str {
    r"
.-.================================================================================================.-.
[8]::::::::::::            ::::::::::::    _ww_    ::::\++/::::            ::::::::::::            | |
| |::::UUUU::::    __,,    :::::<>:::::    \  /    ::::(  )::::     <>     ::: __,,::::    UUUU    | |
| |::::|  |::::   L   \~   :::::/\:::::    |  |    ::::|  |::::     /\     :: L   \~ ::    |  |    | |
| |::::|  |::::     ) (    ::::\  /::::    /  \    ::::/  \::::    \  /    :::: ) ( :::    |  |    | |
| |:::{____}:::   {____}   :::{____}:::   {____}   :::{____}:::   {____}   :: {____} ::   {____}   | |
[7]            ::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::| |
| |            ::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::| |
| |     ()     :::::():::::     ()     :::::():::::     ()     :::::():::::     ()     :::::():::::| |
| |     {}     :::::{}:::::     {}     :::::{}:::::     {}     :::::{}:::::     {}     :::::{}:::::| |
| |    {__}    ::::{__}::::    {__}    ::::{__}::::    {__}    ::::{__}::::    {__}    ::::{__}::::| |
[6]::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::            | |
| |::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::            | |
| |::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::            | |
| |::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::            | |
| |::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::            | |
[5]            ::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::| |
| |            ::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::| |
| |            ::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::| |
| |            ::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::| |
| |            ::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::| |
[4]::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::            | |
| |::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::            | |
| |::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::            | |
| |::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::            | |
| |::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::            | |
[3]            ::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::| |
| |            ::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::| |
| |            ::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::| |
| |            ::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::| |
| |            ::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::| |
[2]::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::            | |
| |::::::::::::            ::::::::::::            ::::::::::::            ::::::::::::            | |
| |:::: () ::::     ()     :::: () ::::     ()     :::: () ::::     ()     :::: () ::::     ()     | |
| |:::: @@ ::::     @@     :::: @@ ::::     @@     :::: @@ ::::     @@     :::: @@ ::::     @@     | |
| |::: {@@} :::    {@@}    ::: {@@} :::    {@@}    ::: {@@} :::    {@@}    ::: {@@} :::    {@@}    | |
[1]            ::::::::::::            ::: _ww_ :::    \++/    ::::::::::::            ::::::::::::| |
| |    UUUU    ::: __,, :::     <>     ::: \@@/ :::    (@@)    :::: <> ::::    __,,    ::: UUUU :::| |
| |    |@@|    :: L@@@\~ ::     /\     ::: |@@| :::    |@@|    :::: /\ ::::   L@@@\~   ::: |@@| :::| |
| |    |@@|    :::: )@( :::    \@@/    ::: /@@\ :::    /@@\    ::: \@@/ :::     )@(    ::: |@@| :::| |
| |   {@@@@}   :: {@@@@} ::   {@@@@}   :: {@@@@} ::   {@@@@}   :: {@@@@} ::   {@@@@}   :: {@@@@} ::| |
'-'=========[a]=========[b]=========[c]=========[d]=========[e]=========[f]=========[g]=========[h]'-'"
}
